Start <- Sys.time()
out <- sfLapply(1:ncpus, run.simulations)
End <- Sys.time(); print(End-Start)
sfStop()
# dir.create("SimulationResults", showWarnings = FALSE)
fileName <- "Korea_SMOKETEST"
save(out, file = file.path("SimulationResults", paste0(fileName,".RData")))
cat("Saved:", file.path("SimulationResults", paste0(fileName,".RData")), "\n")
## Visual Check for Testrun ##
# 1) Load your smoke-test results
load("SimulationResults/Korea_SMOKETEST.RData")
# 2) Build SRB and TFR matrices from 'out' (works for any niter)
#    SRB in boys per 100 girls = p/(1-p) * 100, where p = propBoys
srb_runs <- lapply(out, function(z) t((z$propBoys / (1 - z$propBoys)) * 100))
srb_mat  <- do.call(rbind, srb_runs)
# Years are the rownames of propBoys
years <- as.integer(rownames(out[[1]]$propBoys))
# TFR is either in $TFR (non-sensitivity) or embedded in fertilityData
tfr_runs <- lapply(out, function(z) {
if (!is.null(z$TFR)) {
t(z$TFR)
} else {
# fallback if needed
t(z$fertilityData[, ncol(z$fertilityData), , drop = FALSE])
}
})
tfr_mat <- do.call(rbind, tfr_runs)
# 3) Smooth and compute means/quantiles
ma <- function(x, n=5) stats::filter(x, rep(1/n, n), sides = 2)
srb_ma <- t(apply(srb_mat, 1, ma))
tfr_ma <- t(apply(tfr_mat, 1, ma))
srb_mean <- apply(srb_ma, 2, mean, na.rm = TRUE)
srb_q10  <- apply(srb_ma, 2, quantile, 0.10, na.rm = TRUE)
srb_q90  <- apply(srb_ma, 2, quantile, 0.90, na.rm = TRUE)
tfr_mean <- apply(tfr_ma, 2, mean, na.rm = TRUE)
tfr_q10  <- apply(tfr_ma, 2, quantile, 0.10, na.rm = TRUE)
tfr_q90  <- apply(tfr_ma, 2, quantile, 0.90, na.rm = TRUE)
# 4) Plots
library(RColorBrewer)
cols <- brewer.pal(8, "Greys")
ni <- c(1, 2, length(years)-1, length(years))  # trim MA edge NAs if present
ni <- ni[ni >= 1 & ni <= length(years)]        # guard for very short series
# SRB
plot(years, srb_mean, type = "n", ylim = c(104, 118),
xlab = "Year", ylab = "SRB (boys per 100 girls)", frame.plot = FALSE)
grid(lwd = 2)
if (length(years) > 4) {
polygon(c(years[-ni], rev(years[-ni])),
c(srb_q10[-ni], rev(srb_q90[-ni])),
col = cols[4], border = NA)
}
lines(years, srb_mean, lwd = 3, col = cols[7])
title("South Korea — Simulated SRB (smoke test)")
# TFR
plot(years, tfr_mean, type = "n",
ylim = range(tfr_q10, tfr_q90, na.rm = TRUE),
xlab = "Year", ylab = "TFR", frame.plot = FALSE)
grid(lwd = 2)
if (length(years) > 4) {
polygon(c(years[-ni], rev(years[-ni])),
c(tfr_q10[-ni], rev(tfr_q90[-ni])),
col = cols[4], border = NA)
}
lines(years, tfr_mean, lwd = 3, col = cols[7])
title("South Korea — Simulated TFR (smoke test)")
### End of test run ############################################################
}
#############################################################################
#                                                                           #
# THE DYNAMICS OF SON PREFERENCE, TECHNOLOGY DIFFUSION, AND FERTILITY       #
# DECLINE UNDERLYING DISTORTED SEX RATIOS AT BIRTH: A SIMULATION APPROACH   #
#                                                                           #
#                                                                           #
# Ridhi KASHYAP - kashyap@demogr.mpg.de/ridhi.kashyap@nuffield.ox.ac.uk     #
# Francisco VILLAVICENCIO - villavicencio@imada.sdu.dk                      #
#                                                                April 2016 #
#############################################################################
############################################################
### 1)  PACKAGES, LIBRARIES AND WORKING DIRECTORY        ###
############################################################
# Clear workspace
rm(list = ls())
# Packages
# install.packages("snowfall")
# install.packages("parallel")
# install.packages(c("snowfall","parallel","RColorBrewer"), Ncpus=2)
library(snowfall)
library(parallel)
# Set the working directory for the code and the subfolders 'Data' and 'Sensitivity'
setwd(".")
#### Try a testrun #######################################################################
# Temporarily disable everything below this point
if (FALSE) {
## Define globals used by FunctionsSRB.R BEFORE sourcing it
iniYear   <- 1980
niter     <- 10              # for smoke test
minAge    <- 15
maxAge    <- 50
cohortLen <- 5
periodStudy <- seq(iniYear, iniYear + niter - 1, 1)
cohortNames <- seq(iniYear - maxAge,
iniYear + trunc(niter / cohortLen, 0) * cohortLen,
cohortLen)
sensitivity <- FALSE
model <- "Empirical"
country <- "Korea"
iniPop    <- 50000
startYear <- 1945
nsim      <- 2
srb       <- 0.5122
alphaPar <- 0.075; gammaPar <- 0.20
rhoPar   <- 0.50;  phiPar   <- 7
sigmaPar <- 1.70;  betaPar  <- 0.20
inputData     <- get.data(country)
spData        <- funcSonPref(country)
sonPrefMx     <- spData$sonPrefMx
sonPrefTheory <- spData$sonPrefTheory
startPop      <- initialization(iniPop, startYear)
# Quick error fixes for a test run
fertMod <- 1   # use the standard UN fertility schedule (“fertility5”)
sonTheoPar <- 1L      # dummy value; only used in Theory mode
#
ncpus <- min(detectCores(), 2)
sfInit(parallel = TRUE, cpus = ncpus)
sfExport("iniYear","nsim","niter","srb","minAge","maxAge",
"alphaPar","gammaPar","rhoPar","phiPar","sigmaPar","betaPar",
"cohortLen","periodStudy","cohortNames","startPop","inputData",
"sonPrefMx","sonPrefTheory","model","country",
"sensitivity","fertMod","sonTheoPar")
sfSource("FunctionsSRB.R")
Start <- Sys.time()
out <- sfLapply(1:ncpus, run.simulations)
End <- Sys.time(); print(End-Start)
sfStop()
# dir.create("SimulationResults", showWarnings = FALSE)
fileName <- "Korea_SMOKETEST"
save(out, file = file.path("SimulationResults", paste0(fileName,".RData")))
cat("Saved:", file.path("SimulationResults", paste0(fileName,".RData")), "\n")
## Visual Check for Testrun ##
# 1) Load your smoke-test results
load("SimulationResults/Korea_SMOKETEST.RData")
# 2) Build SRB and TFR matrices from 'out' (works for any niter)
#    SRB in boys per 100 girls = p/(1-p) * 100, where p = propBoys
srb_runs <- lapply(out, function(z) t((z$propBoys / (1 - z$propBoys)) * 100))
srb_mat  <- do.call(rbind, srb_runs)
# Years are the rownames of propBoys
years <- as.integer(rownames(out[[1]]$propBoys))
# TFR is either in $TFR (non-sensitivity) or embedded in fertilityData
tfr_runs <- lapply(out, function(z) {
if (!is.null(z$TFR)) {
t(z$TFR)
} else {
# fallback if needed
t(z$fertilityData[, ncol(z$fertilityData), , drop = FALSE])
}
})
tfr_mat <- do.call(rbind, tfr_runs)
# 3) Smooth and compute means/quantiles
ma <- function(x, n=5) stats::filter(x, rep(1/n, n), sides = 2)
srb_ma <- t(apply(srb_mat, 1, ma))
tfr_ma <- t(apply(tfr_mat, 1, ma))
srb_mean <- apply(srb_ma, 2, mean, na.rm = TRUE)
srb_q10  <- apply(srb_ma, 2, quantile, 0.10, na.rm = TRUE)
srb_q90  <- apply(srb_ma, 2, quantile, 0.90, na.rm = TRUE)
tfr_mean <- apply(tfr_ma, 2, mean, na.rm = TRUE)
tfr_q10  <- apply(tfr_ma, 2, quantile, 0.10, na.rm = TRUE)
tfr_q90  <- apply(tfr_ma, 2, quantile, 0.90, na.rm = TRUE)
# 4) Plots
library(RColorBrewer)
cols <- brewer.pal(8, "Greys")
ni <- c(1, 2, length(years)-1, length(years))  # trim MA edge NAs if present
ni <- ni[ni >= 1 & ni <= length(years)]        # guard for very short series
# SRB
plot(years, srb_mean, type = "n", ylim = c(104, 118),
xlab = "Year", ylab = "SRB (boys per 100 girls)", frame.plot = FALSE)
grid(lwd = 2)
if (length(years) > 4) {
polygon(c(years[-ni], rev(years[-ni])),
c(srb_q10[-ni], rev(srb_q90[-ni])),
col = cols[4], border = NA)
}
lines(years, srb_mean, lwd = 3, col = cols[7])
title("South Korea — Simulated SRB (smoke test)")
# TFR
plot(years, tfr_mean, type = "n",
ylim = range(tfr_q10, tfr_q90, na.rm = TRUE),
xlab = "Year", ylab = "TFR", frame.plot = FALSE)
grid(lwd = 2)
if (length(years) > 4) {
polygon(c(years[-ni], rev(years[-ni])),
c(tfr_q10[-ni], rev(tfr_q90[-ni])),
col = cols[4], border = NA)
}
lines(years, tfr_mean, lwd = 3, col = cols[7])
title("South Korea — Simulated TFR (smoke test)")
### End of test run ############################################################
}
# SENSITIVITY: TRUE to carry out sensitivity analysis
sensitivity <- FALSE
# Parameters for the sensitivity analysis
if (sensitivity) {
# In order to carry out a sensitivity analysis, the user may choose one of the 4 tables below with sets of parameters.
# Alternatively, the user may generate its own table with different parameter combinations.
lhsPar <- read.table("Sensitivity/beta_sigma_sensitivity.txt", header = T)
# lhsPar <- read.table("Sensitivity/rho_phi_sensitivity.txt", header = T)
# lhsPar <- read.table("Sensitivity/lhs_44x5sims_244set.txt", header = T)
# lhsPar <- read.table("Sensitivity/lhs_180x1sim_244set.txt", header = T)
lhsPar <- lhsPar[, order(names(lhsPar))]
}
# CHOOSE A MODEL (Theory or empirical)
model <- "Empirical"
# GLOBAL INITIAL PARAMETERS
# Number of iterations
if (model == "Empirical") niter <- 70 else niter <- 50
# Initial year of the simulation
iniYear <- 1980
# Initial population
iniPop <- 100000
# Starting year for population initialization
startYear <- 1945
# Number of simulations
nsim <- 2
# Sex Ratio at Birth
srb <- 0.5122
# Min age reproduction
minAge <- 15
# Max age reproduction
maxAge <- 50
# MODEL PARAMETERS:
# Length of the vector parameter !!! WHEN MODEL = "Theory" it only considers the first value of each vector
n <- 1
# parity scaling parameter
alphaPar <- rep(0.075, n)
# Birth risk proportional expansion parameter without meeting son preference
gammaPar <- rep(0.2, n)
# Techonolgy difussion parameters
rhoPar <- rep(0.5, n)
phiPar <- rep(7, n)
# Abortion probabilities scaling parameter
sigmaPar <- rep(1.7, n)
betaPar <- rep(.2, n)
# Son preferences for the THEORETICAL scenario: 1 = 0%, 2 = 10%, 3 = 20%,... 11 = 100%)
sonTheoPar <- c(1, 6, 11)
# Fertility declines to be tested on the THEORETICAL model:
#   1 = normal decline,
#   2 = 25% faster, 3 = 66.7% faster
#   4 = 28.5% slower, 5 = 50% slower
# fertMod <- 1:3 (The first value is used by DEFAULT)
fertMod <- 1
# Period of study
periodStudy <- seq(iniYear, iniYear + niter - 1, 1)
# Cohorts considered (5-year cohort)
cohortLen <- 5
cohortNames <- seq(iniYear-maxAge, iniYear+trunc(niter/cohortLen,0)*cohortLen, cohortLen)
# Source code
source("FunctionsSRB.R")
# COUNTRY: Data from 2 countries are available to run the model: South Korea and India
country <- "Korea"
# INPUT DATA: Female Population, Fertility rates, and death rates
inputData <- get.data(country)
# SON PREFERENCE DATA
dataSonPref <- funcSonPref(country)
sonPrefMx <- dataSonPref$sonPrefMx
sonPrefTheory <- dataSonPref$sonPrefTheory
# INITIALIZE THE MODEL: STARTING POPULATION
startPop <- initialization(iniPop, startYear)
# Number of CPUS for parallel computing depending on the test
# 1) Empirical model
if (model == "Empirical") {
fertMod <- fertMod[1]
# When only ONE value per parameter, split the simulaitons among cores
if (length(alphaPar) == 1 & !sensitivity) {
ncpus <- min(detectCores(), 24)
nsim <- max(1, trunc(nsim / ncpus))
alphaPar <- rep(alphaPar, ncpus)
gammaPar <- rep(gammaPar, ncpus)
rhoPar <- rep(rhoPar, ncpus)
phiPar <- rep(phiPar, ncpus)
sigmaPar <- rep(sigmaPar, ncpus)
betaPar <- rep(betaPar, ncpus)
} else ncpus <- min(detectCores(), length(alphaPar))
}
# 2) Theoretical model with endogenous abortion probabilities
if (model == "Theory") {
# Vary across different son preference values
if (length(sonTheoPar) > 1) {
ncpus <- min(detectCores(), length(sonTheoPar))
fertMod <- fertMod[1]
} else ncpus <- min(detectCores(), length(fertMod))
}
# SENSITIVITY ANALYSIS
if (sensitivity) {
# Number of CPUS
ncpus <- min(detectCores(), nrow(lhsPar))
# Model parameters from the input table 'lhsPar'
alphaPar <- lhsPar[, 1][1:ncpus]
betaPar <- lhsPar[, 2][1:ncpus]
gammaPar <- lhsPar[, 3][1:ncpus]
phiPar <- lhsPar[, 4][1:ncpus]
rhoPar <- lhsPar[, 5][1:ncpus]
sigmaPar <- lhsPar[, 6][1:ncpus]
if (model == "Theory") sonTheoPar <- lhsPar[, 7][1:ncpus]
}
# Start cpus
sfInit(parallel = TRUE, cpus = ncpus)
# Export variables to cpus
sfExport("iniYear", "nsim", "niter", "srb", "minAge", "maxAge", "alphaPar",
"gammaPar", "rhoPar", "phiPar", "sigmaPar", "betaPar", "cohortLen",
"periodStudy", "cohortNames", "startPop", "inputData", "sonPrefMx",
"sonPrefTheory", "model", "sonTheoPar", "fertMod", "sensitivity")
# Run common prep functions on all cpus:
sfSource("FunctionsSRB.R")
run.simluations
run.simulations
ncous
ncpus
View(run.simulations)
#############################################################################
#                                                                           #
# THE DYNAMICS OF SON PREFERENCE, TECHNOLOGY DIFFUSION, AND FERTILITY       #
# DECLINE UNDERLYING DISTORTED SEX RATIOS AT BIRTH: A SIMULATION APPROACH   #
#                                                                           #
#                                                                           #
# Ridhi KASHYAP - kashyap@demogr.mpg.de/ridhi.kashyap@nuffield.ox.ac.uk     #
# Francisco VILLAVICENCIO - villavicencio@imada.sdu.dk                      #
#                                                                April 2016 #
#############################################################################
############################################################
### 1)  PACKAGES, LIBRARIES AND WORKING DIRECTORY        ###
############################################################
# Clear workspace
rm(list = ls())
# Packages
# install.packages("snowfall")
# install.packages("parallel")
# install.packages(c("snowfall","parallel","RColorBrewer"), Ncpus=2)
library(snowfall)
library(parallel)
# Set the working directory for the code and the subfolders 'Data' and 'Sensitivity'
# setwd("PathOfYourWorkingDirectory")
#### Try a testrun #######################################################################
# Temporarily disable everything below this point
if (FALSE) {
## Define globals used by FunctionsSRB.R BEFORE sourcing it
iniYear   <- 1980
niter     <- 10              # for smoke test
minAge    <- 15
maxAge    <- 50
cohortLen <- 5
periodStudy <- seq(iniYear, iniYear + niter - 1, 1)
cohortNames <- seq(iniYear - maxAge,
iniYear + trunc(niter / cohortLen, 0) * cohortLen,
cohortLen)
sensitivity <- FALSE
model <- "Empirical"
country <- "Korea"
iniPop    <- 50000
startYear <- 1945
nsim      <- 2
srb       <- 0.5122
alphaPar <- 0.075; gammaPar <- 0.20
rhoPar   <- 0.50;  phiPar   <- 7
sigmaPar <- 1.70;  betaPar  <- 0.20
inputData     <- get.data(country)
spData        <- funcSonPref(country)
sonPrefMx     <- spData$sonPrefMx
sonPrefTheory <- spData$sonPrefTheory
startPop      <- initialization(iniPop, startYear)
# Quick error fixes for a test run
fertMod <- 1   # use the standard UN fertility schedule (“fertility5”)
sonTheoPar <- 1L      # dummy value; only used in Theory mode
#
ncpus <- min(detectCores(), 2)
sfInit(parallel = TRUE, cpus = ncpus)
sfExport("iniYear","nsim","niter","srb","minAge","maxAge",
"alphaPar","gammaPar","rhoPar","phiPar","sigmaPar","betaPar",
"cohortLen","periodStudy","cohortNames","startPop","inputData",
"sonPrefMx","sonPrefTheory","model","country",
"sensitivity","fertMod","sonTheoPar")
sfSource("Code/FunctionsSRB.R")
Start <- Sys.time()
out <- sfLapply(1:ncpus, run.simulations)
End <- Sys.time(); print(End-Start)
sfStop()
# dir.create("SimulationResults", showWarnings = FALSE)
fileName <- "Korea_SMOKETEST"
save(out, file = file.path("SimulationResults", paste0(fileName,".RData")))
cat("Saved:", file.path("SimulationResults", paste0(fileName,".RData")), "\n")
## Visual Check for Testrun ##
# 1) Load your smoke-test results
load("SimulationResults/Korea_SMOKETEST.RData")
# 2) Build SRB and TFR matrices from 'out' (works for any niter)
#    SRB in boys per 100 girls = p/(1-p) * 100, where p = propBoys
srb_runs <- lapply(out, function(z) t((z$propBoys / (1 - z$propBoys)) * 100))
srb_mat  <- do.call(rbind, srb_runs)
# Years are the rownames of propBoys
years <- as.integer(rownames(out[[1]]$propBoys))
# TFR is either in $TFR (non-sensitivity) or embedded in fertilityData
tfr_runs <- lapply(out, function(z) {
if (!is.null(z$TFR)) {
t(z$TFR)
} else {
# fallback if needed
t(z$fertilityData[, ncol(z$fertilityData), , drop = FALSE])
}
})
tfr_mat <- do.call(rbind, tfr_runs)
# 3) Smooth and compute means/quantiles
ma <- function(x, n=5) stats::filter(x, rep(1/n, n), sides = 2)
srb_ma <- t(apply(srb_mat, 1, ma))
tfr_ma <- t(apply(tfr_mat, 1, ma))
srb_mean <- apply(srb_ma, 2, mean, na.rm = TRUE)
srb_q10  <- apply(srb_ma, 2, quantile, 0.10, na.rm = TRUE)
srb_q90  <- apply(srb_ma, 2, quantile, 0.90, na.rm = TRUE)
tfr_mean <- apply(tfr_ma, 2, mean, na.rm = TRUE)
tfr_q10  <- apply(tfr_ma, 2, quantile, 0.10, na.rm = TRUE)
tfr_q90  <- apply(tfr_ma, 2, quantile, 0.90, na.rm = TRUE)
# 4) Plots
library(RColorBrewer)
cols <- brewer.pal(8, "Greys")
ni <- c(1, 2, length(years)-1, length(years))  # trim MA edge NAs if present
ni <- ni[ni >= 1 & ni <= length(years)]        # guard for very short series
# SRB
plot(years, srb_mean, type = "n", ylim = c(104, 118),
xlab = "Year", ylab = "SRB (boys per 100 girls)", frame.plot = FALSE)
grid(lwd = 2)
if (length(years) > 4) {
polygon(c(years[-ni], rev(years[-ni])),
c(srb_q10[-ni], rev(srb_q90[-ni])),
col = cols[4], border = NA)
}
lines(years, srb_mean, lwd = 3, col = cols[7])
title("South Korea — Simulated SRB (smoke test)")
# TFR
plot(years, tfr_mean, type = "n",
ylim = range(tfr_q10, tfr_q90, na.rm = TRUE),
xlab = "Year", ylab = "TFR", frame.plot = FALSE)
grid(lwd = 2)
if (length(years) > 4) {
polygon(c(years[-ni], rev(years[-ni])),
c(tfr_q10[-ni], rev(tfr_q90[-ni])),
col = cols[4], border = NA)
}
lines(years, tfr_mean, lwd = 3, col = cols[7])
title("South Korea — Simulated TFR (smoke test)")
### End of test run ############################################################
}
###########################################################
### 2)  INITIAL PARAMETERS                              ###
###########################################################
# SENSITIVITY: TRUE to carry out sensitivity analysis
sensitivity <- FALSE
# sensitivity <- TRUE
# Parameters for the sensitivity analysis
if (sensitivity) {
# In order to carry out a sensitivity analysis, the user may choose one of the 4 tables below with sets of parameters.
# Alternatively, the user may generate its own table with different parameter combinations.
lhsPar <- read.table("Sensitivity/beta_sigma_sensitivity.txt", header = T)
# lhsPar <- read.table("Sensitivity/rho_phi_sensitivity.txt", header = T)
# lhsPar <- read.table("Sensitivity/lhs_44x5sims_244set.txt", header = T)
# lhsPar <- read.table("Sensitivity/lhs_180x1sim_244set.txt", header = T)
lhsPar <- lhsPar[, order(names(lhsPar))]
}
# CHOOSE A MODEL (Theory or empirical)
model <- "Empirical"
# model <- "Theory"
# GLOBAL INITIAL PARAMETERS
# Number of iterations
if (model == "Empirical") niter <- 70 else niter <- 50
# Initial year of the simulation
iniYear <- 1980
# Initial population
iniPop <- 100000
# Starting year for population initialization
startYear <- 1945
# Number of simulations
nsim <- 2
# Sex Ratio at Birth
srb <- 0.5122
# Min age reproduction
minAge <- 15
# Max age reproduction
maxAge <- 50
# MODEL PARAMETERS:
# Length of the vector parameter !!! WHEN MODEL = "Theory" it only considers the first value of each vector
n <- 1
# parity scaling parameter
alphaPar <- rep(0.075, n)
# Birth risk proportional expansion parameter without meeting son preference
gammaPar <- rep(0.2, n)
# Techonolgy difussion parameters
rhoPar <- rep(0.5, n)
phiPar <- rep(7, n)
# Abortion probabilities scaling parameter
sigmaPar <- rep(1.7, n)
betaPar <- rep(.2, n)
# Son preferences for the THEORETICAL scenario: 1 = 0%, 2 = 10%, 3 = 20%,... 11 = 100%)
sonTheoPar <- c(1, 6, 11)
# sonTheoPar <- 3
# Fertility declines to be tested on the THEORETICAL model:
#   1 = normal decline,
#   2 = 25% faster, 3 = 66.7% faster
#   4 = 28.5% slower, 5 = 50% slower
# fertMod <- 1:3 (The first value is used by DEFAULT)
fertMod <- 1
# Period of study
periodStudy <- seq(iniYear, iniYear + niter - 1, 1)
# Cohorts considered (5-year cohort)
cohortLen <- 5
cohortNames <- seq(iniYear-maxAge, iniYear+trunc(niter/cohortLen,0)*cohortLen, cohortLen)
# Source code
source("Code/FunctionsSRB.R")
